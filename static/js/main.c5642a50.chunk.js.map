{"version":3,"sources":["DropZoneInput.js","HTMLInputs.js","App.js","serviceWorker.js","index.js"],"names":["DropZone","props","react_default","a","createElement","es","onDrop","files","console","log","multiple","accept","_ref","getRootProps","getInputProps","isDragActive","Object","assign","className","classnames","classes","dropzone--isActive","children","defaultProps","HTMLInputs","Fragment","htmlFor","type","name","id","capture","autoComplete","map","i","t","concat","join","key","handleSubmit","e","preventDefault","App","onSubmit","src_HTMLInputs","DropZoneInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wLAKMA,EAAW,SAAAC,GAIf,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,OALJ,SAAoBC,GAClBC,QAAQC,IAAI,2BAA4BF,IAKtCG,SAAUT,EAAMS,SAChBC,OAAQV,EAAMU,QAEb,SAAAC,GAAmD,IAAhDC,EAAgDD,EAAhDC,aAAcC,EAAkCF,EAAlCE,cAAeC,EAAmBH,EAAnBG,aAC/B,OACEb,EAAAC,EAAAC,cAAA,SAAAY,OAAAC,OAAA,GACMJ,IADN,CAEEK,UAAWC,IAAWlB,EAAMmB,QAAS,CACnCC,qBAAsBN,MAGxBb,EAAAC,EAAAC,cAAA,QAAWU,KACVb,EAAMqB,aAcnBtB,EAASuB,aAAe,CACtBb,UAAU,GAGGV,QCMAwB,MA9Cf,SAAoBvB,GAClB,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAMsB,SAAP,KACEvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOsB,QAAQ,KAAf,SACAxB,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,OAAOC,KAAK,QAAQjB,OAAO,UAAUkB,GAAG,OAGtD3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOsB,QAAQ,KAAf,0BACAxB,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,OAAOC,KAAK,QAAQjB,OAAO,UAAUkB,GAAG,IAAIC,SAAO,KAGjE5B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOsB,QAAQ,KAAf,2BACAxB,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,OAAOC,KAAK,QAAQjB,OAAO,UAAUkB,GAAG,IAAInB,UAAQ,KAGlER,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOsB,QAAQ,KAAf,yBACAxB,EAAAC,EAAAC,cAAA,SACEuB,KAAK,OACLC,KAAK,QACLjB,OAAO,UACPkB,GAAG,IACHE,aAAa,SAIhB,CAAC,IAAK,OAAQ,MAAO,CAAC,OAAQ,QAAQC,IAAI,SAACL,EAAMM,GAChD,IAAMtB,EACY,kBAATgB,EACHA,EAAKK,IAAI,SAAAE,GAAC,eAAAC,OAAaD,KAAKE,KAAK,KADrC,SAAAD,OAEaR,GAEf,OACEzB,EAAAC,EAAAC,cAAA,OAAKiC,IAAKJ,GACR/B,EAAAC,EAAAC,cAAA,SAAOsB,QAAO,SAAAS,OAAWF,IAAMtB,GAC/BT,EAAAC,EAAAC,cAAA,SAAOuB,KAAK,OAAOC,KAAK,QAAQjB,OAAQA,EAAQkB,GAAE,SAAAM,OAAWF,UCnCzE,SAASK,EAAaC,GACpBA,EAAEC,iBAEFhC,QAAQC,IAAI8B,GAuBCE,MApBf,SAAaxC,GACX,OACEC,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,QAAMsC,SAAUJ,GACdpC,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAACuC,EAAD,MAEAzC,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACwC,EAAD,CACExB,QAAQ,oCACRT,OAAQ,CAAC,aAAc,aACvBD,UAAQ,GAERR,EAAAC,EAAAC,cAAA,kCCZUyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c5642a50.chunk.js","sourcesContent":["import React from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport classnames from \"classnames\";\nimport PropTypes from \"prop-types\";\n\nconst DropZone = props => {\n  function handleDrop(files) {\n    console.log(\"files have been dropped:\", files);\n  }\n  return (\n    <Dropzone\n      onDrop={handleDrop}\n      multiple={props.multiple}\n      accept={props.accept}\n    >\n      {({ getRootProps, getInputProps, isDragActive }) => {\n        return (\n          <button\n            {...getRootProps()}\n            className={classnames(props.classes, {\n              \"dropzone--isActive\": isDragActive\n            })}\n          >\n            <input {...getInputProps()} />\n            {props.children}\n          </button>\n        );\n      }}\n    </Dropzone>\n  );\n};\n\nDropZone.propTypes = {\n  multiple: PropTypes.bool.isRequired,\n  classes: PropTypes.string,\n  accept: PropTypes.array\n};\n\nDropZone.defaultProps = {\n  multiple: false\n};\n\nexport default DropZone;\n","import React from \"react\";\n\nfunction HTMLInputs(props) {\n  return (\n    <React.Fragment>\n      <div>\n        <label htmlFor=\"1\">Basic</label>\n        <input type=\"file\" name=\"image\" accept=\"image/*\" id=\"1\" />\n      </div>\n\n      <div>\n        <label htmlFor=\"2\">With Capture Attribute</label>\n        <input type=\"file\" name=\"image\" accept=\"image/*\" id=\"2\" capture />\n      </div>\n\n      <div>\n        <label htmlFor=\"3\">With Multiple Attribute</label>\n        <input type=\"file\" name=\"image\" accept=\"image/*\" id=\"3\" multiple />\n      </div>\n\n      <div>\n        <label htmlFor=\"3\">With Autocomplete Off</label>\n        <input\n          type=\"file\"\n          name=\"image\"\n          accept=\"image/*\"\n          id=\"3\"\n          autoComplete=\"off\"\n        />\n      </div>\n\n      {[\"*\", \"jpeg\", \"png\", [\"jpeg\", \"png\"]].map((type, i) => {\n        const accept =\n          typeof type === \"object\"\n            ? type.map(t => `image/${t}`).join(\",\")\n            : `image/${type}`;\n\n        return (\n          <div key={i}>\n            <label htmlFor={`image-${i}`}>{accept}</label>\n            <input type=\"file\" name=\"image\" accept={accept} id={`image-${i}`} />\n          </div>\n        );\n      })}\n    </React.Fragment>\n  );\n}\n\nexport default HTMLInputs;\n","import React from \"react\";\n\nimport DropZone from \"./DropZoneInput\";\nimport HTMLInputs from \"./HTMLInputs\";\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  console.log(e);\n}\n\nfunction App(props) {\n  return (\n    <section>\n      <form onSubmit={handleSubmit}>\n        <h1>Basic HTML</h1>\n        <HTMLInputs />\n\n        <h1>DropZone</h1>\n        <DropZone\n          classes=\"small reversed add-image pad-none\"\n          accept={[\"image/jpeg\", \"image/png\"]}\n          multiple\n        >\n          <span>DropZone input</span>\n        </DropZone>\n      </form>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}